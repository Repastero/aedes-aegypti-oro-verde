/**
 *
 * This file was automatically generated by the Repast Simphony Agent Editor.
 * Please see http://repast.sourceforge.net/ for details.
 *
 * Luego fue editado desde el groovy.
 *
 */

/**
 *
 * Set the package name.
 *
 */

package infeccion

import java.util.Arrays;
import java.util.List;
import repast.simphony.random.RandomHelper
import repast.simphony.space.grid.GridPoint


public class OroVerde {
	
	private static final long serialVersionUID = 1L
	protected static long agentIDCounter = 1
	protected String agentID = "OroVerde " + (agentIDCounter++)
	
	//MaxiF: Es ambiente es una bandera de este agente que permite que se busque más fácil desde los mosquitos y los humanos este agente.
	public boolean getEsAmbiente(){
		return true
	}
	
	//MaxiF: Configuración de la cantidad de habitantes de la ciudad
	
	   
		public int getPoblacion(){
		return 5000
	}
	
	//MaxiF: Configuración del tamaño de la ciudad
	public int[] getTamanio(){
		return [200, 200]
	}
	
	//MaxiF: Los siguientes métodos tienen que ver con el comportamiento de desplazamiento de los humanos
	//		En particular las partes específicas a oro verde.

	//Maxi F:Lista de los lugares de ocio en Oro Verde
	private GridPoint[] LugOcio =  [new GridPoint(181,6),
									new GridPoint(3,59),
									new GridPoint(56,18),
									new GridPoint(89,62),
									new GridPoint(16,76)]
	public GridPoint posOcio(){
		RandomHelper rh = new RandomHelper();
		GridPoint pos = LugOcio[rh.nextIntFromTo(0,LugOcio.size()-1)];
		pos = new GridPoint(pos.toIntArray(null)[0] + (int)rh.getNormal().nextDouble(0,2), pos.toIntArray(null)[1] + (int)rh.getNormal().nextDouble(0,2))
		return pos
	}
	
	//Maxi F:Lista de los lugares de trabajo/estudio en Oro Verde
	private GridPoint[] LugTrabajo = [new GridPoint(52,62),
										new GridPoint(64,93),
										new GridPoint(104,161),
										new GridPoint(186,25),
										new GridPoint(190,43),
										new GridPoint(24,134),
										new GridPoint(137,153),
										new GridPoint(80,179),
										new GridPoint(102,174),
										new GridPoint(44,154)]
	
	public int IDTrabajo(){
		//Devuelve un ID del trabajo para cuestiones de graficacion.
		RandomHelper rh = new RandomHelper();
		return rh.nextIntFromTo(0,LugTrabajo.size()-1)
	}
	
	public GridPoint posTrabajo(int ID){
		//Devuelve una posición del trabajo corrido con una distribución normal.
		
		RandomHelper rh = new RandomHelper();
		GridPoint pos = LugTrabajo[ID];
		pos = new GridPoint(pos.toIntArray(null)[0] + (int)rh.getNormal().nextDouble(0,2), pos.toIntArray(null)[1] + (int)rh.getNormal().nextDouble(0,2))
		return pos 
	}
	
	//Maxi F: Devuelve un lugar donde puede haber una casa
	public GridPoint posCasa(){
		//Actualmete la casa es un lugar aleatorio seleccionado uniformemete de todo el grid, pero queda
		//		implementado este método para cambiarlo a otras formas si es necesario. 
		RandomHelper rh = new RandomHelper();
		return new GridPoint(rh.nextIntFromTo(0,this.getTamanio()[0]-1),rh.nextIntFromTo(0,this.getTamanio()[1]-1));
	}

	//Maxi F:Devuelve un lugar donde hay otros lugares visitables, como familiares o amigos, supermercados, farmacias, etc.
	//		Lugares que son menos probables que se visiten, y se se hacen, es por poco tiempo. 

	public GridPoint posOtros(){
		//Actualmete los otros lugares son seleccionados aleatorio uniformemete de todo el grid, pero queda
		//		implementado este método para cambiarlo a otras formas si es necesario. 
		RandomHelper rh = new RandomHelper();
		
		
		return new GridPoint(rh.nextIntFromTo(0,this.getTamanio()[0]-1),rh.nextIntFromTo(0,this.getTamanio()[1]-1));
	}
	
	
	//MaxiF: Devuelve la velocidad de traslado según un distribución de probabilidad propia de oro verde.
	// MaxiF: La velocidad de traslado te marca la velocidad en unidades/(1/32)ticks, donde cada unidad son 5 metros,
	//			y un tick es una hora. Ej: La marcha humana es de 6km/Hora, entonces son aprox 38 unidades/tick.
	public double velocTraslado(){
		return 38;
	} 
	
	//MaxiF: La probabilidad de la cadena de markov de movimiento temporal es un arreglo que:
	//	probabilidadTMMC[P,i,j], donde P es el período del día (mañana, siesta, tarde, anochecer)
	//	i es el nodo de donde sale, y j es el nodo a donde va.
	//	El nodo 0 es la casa, el 1 es el trabajo/estudio, el 2 es ocio, el 3 es otros (supermercados, farmacias, etc) 
	//  Ej: probabilidadTMMC[1][1][2] es la probabilidad de salir del trabajo al lugar de ocio en el período 1 (siesta)
	private def probabilidadTMMC = [[[0.1,0.7,0.1,0.1],[0.025,0.925,0.025,0.025],[0.1,0.7,0.1,0.1],[0.1,0.7,0.1,0.1]],
		[[0.925,0.025,0.025,0.025],[0.8,0,0.1,0.1],[0.8,0,0.1,0.1],[0.8,0,0.1,0.1]],
		[[0.025,0.925,0.025,0.025],[0.025,0.925,0.025,0.025],[0.025,0.925,0.025,0.025],[0.025,0.925,0.025,0.025]],
		[[0.925,0.025,0.025,0.025],[0.05,0.05,0.45,0.45],[0.7,0,0.3,0],[0.7,0,0,0.3]]]
	
	/*private def probabilidadTMMC = [[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]],
		[[0,1,0,0],[0,1,0,0],[0,1,0,0],[0,1,0,0]],
		[[0,0,1,0],[0,0,1,0],[0,0,1,0],[0,0,1,0]],
		[[0,0,1,0],[0,0,1,0],[0,0,1,0],[0,0,1,0]]]*/

	
	public def matrizTMMC(){
		return probabilidadTMMC;
	}
	
}
